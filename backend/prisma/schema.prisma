// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  username       String        @unique
  password       String?
  googleId       String?       @unique //stores unique google id
  avatarUrl      String?
  cashBalance    Float         @default(0) //  User's available funds
  reservedCash   Decimal  @default(0)
  createdAt      DateTime      @default(now())
  kycStatus      String        @default("PENDING") // PENDING, APPROVED, REJECTED
  kycDocument    String? // file path or URL to uploaded document
  role           Role          @default(USER)
  passwordChangedAt DateTime?
  updatedAt      DateTime      @updatedAt
  portfolios     Portfolio[]
  transactions   Transaction[]
  watchlistItems Watchlist[]
}

model Stock {
  id             String          @id @default(uuid())
  symbol         String          @unique
  companyName    String
  currentPrice   Float
  exchange       String
  sector         String
  totalQuantity  BigInt
  marketCap      Float
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  portfolioItems PortfolioItem[]
  transactions   Transaction[]
  watchlistedBy  Watchlist[]
  prices         StockPrice[]
}

model StockPrice {
  id        String   @id @default(uuid())
  stockId   String
  price     Float
  createdAt DateTime @default(now())
  stock     Stock    @relation(fields: [stockId], references: [id])
}

model Portfolio {
  id             String          @id @default(uuid())
  name           String          @default("Default Portfolio")
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  portfolioItems PortfolioItem[]
  createdAt      DateTime        @default(now())
}

model PortfolioItem {
  id          String    @id @default(uuid())
  stock       Stock     @relation(fields: [stockId], references: [id])
  stockId     String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  quantity    Int
  avgBuyPrice Float
}

model Transaction {
  id         String          @id @default(uuid())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  stock      Stock?          @relation(fields: [stockId], references: [id])
  stockId    String?
  amount     Float?
  type       TransactionType
  quantity   Int?
  price      Float?
  totalValue Float?
  createdAt  DateTime        @default(now())
}

model Watchlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  stock     Stock    @relation(fields: [stockId], references: [id])
  stockId   String
  createdAt DateTime @default(now())

  @@unique([userId, stockId])
}
model Order {
  id          String   @id @default(uuid())
  userId      String
  stockId     String
  side        String   // "BUY" | "SELL"
  type        String   // "MARKET" | "LIMIT"
  limitPrice  Decimal? // null for market
  qty         Int
  filledQty   Int      @default(0)
  status      String   // "OPEN" | "FILLED" | "CANCELLED" | "PARTIAL"
  createdAt   DateTime @default(now())
  // indexes youâ€™ll likely want:
  @@index([stockId, status, side, limitPrice])
}


enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAW
}

enum Role {
  USER
  ADMIN
}
